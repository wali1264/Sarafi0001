// This is a placeholder for types generated by the Supabase CLI.
// `supabase gen types typescript --project-id "your-project-id" > types/supabase.ts`
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      [key: string]: any
    }
    Views: {
      [key: string]: any
    }
    Functions: {
      [key: string]: any
    }
  }
}

export enum Currency {
    AFN = 'AFN',
    USD = 'USD',
    PKR = 'PKR',
    EUR = 'EUR',
    IRT_BANK = 'IRT_BANK',
    IRT_CASH = 'IRT_CASH',
}

export const permissionModules = [
    'dashboard', 'cashbox', 'domesticTransfers', 'foreignTransfers', 'commissionTransfers',
    'accountTransfers', 'customers', 'partnerAccounts', 'expenses', 'reports', 'settings', 'amanat'
] as const;
export type PermissionModule = typeof permissionModules[number];

export type PermissionAction = 'view' | 'create' | 'edit' | 'delete' | 'approve' | 'process';

export type Permissions = {
    [key in PermissionModule]?: {
        [key in PermissionAction]?: boolean;
    };
};

export interface Role {
    id: string;
    name: string;
    permissions: Permissions;
}

export interface User {
    id: string;
    name: string;
    username: string;
    password?: string;
    role_id: string;
    role?: Role;
}

export interface ExternalLogin {
    username: string;
    password?: string; // Optional on return
    login_type: 'customer' | 'partner';
    linked_entity_id: string;
    id: string; // To uniquely identify and delete logins
}

export type AuthenticatedUser = (User & { userType: 'internal'; role: Role }) | 
                               (ExternalLogin & { userType: 'customer'; entity: Customer }) | 
                               (ExternalLogin & { userType: 'partner'; entity: PartnerAccount });


export interface CreateExternalLoginPayload {
    username: string;
    password?: string;
    login_type: 'customer' | 'partner';
    linked_entity_id: string;
    user: User;
}
export interface DeleteExternalLoginPayload {
    id: string;
    user: User;
}


export interface CreateUserPayload {
    name: string;
    username: string;
    password?: string;
    role_id: string;
}
export interface UpdateUserPayload extends Partial<CreateUserPayload> {
    id: string;
}
export interface DeleteUserPayload {
    id: string;
}

export interface CreateRolePayload {
    name: string;
    permissions: Permissions;
}
export interface UpdateRolePayload extends CreateRolePayload {
    id: string;
}

export interface Customer {
    id: string;
    name: string;
    code: string;
    whatsapp_number: string;
    balances: { [key in Currency]?: number };
}

export interface CustomerTransaction {
    id: string;
    customer_id: string;
    timestamp: Date;
    type: 'credit' | 'debit';
    amount: number;
    currency: Currency;
    description: string;
    linked_entity_id: string;
    linked_entity_type: 'DomesticTransfer' | 'CashDeposit' | 'CashWithdrawal' | 'AccountTransfer' | 'ForeignTransaction' | 'InternalExchange' | 'CommissionTransfer';
}

export interface CreateCustomerPayload {
    name: string;
    code: string;
    whatsapp_number: string;
    user: User;
}
export interface UpdateCustomerPayload extends Partial<Omit<Customer, 'id' | 'balances'>> {
    id: string;
    user: User;
}

export interface PartnerAccount {
    id: string;
    name: string;
    province: string;
    whatsapp_number: string;
    balances: { [key in Currency]?: number };
    status: 'Active' | 'Inactive';
}

export interface PartnerTransaction {
    id: string;
    partner_id: string;
    timestamp: Date;
    type: 'credit' | 'debit';
    amount: number;
    currency: Currency;
    description: string;
    linked_transfer_id?: string;
    bank_account_id?: string;
    source_account_number?: string;
    destination_account_number?: string;
}

export interface CreatePartnerPayload {
    name: string;
    province: string;
    whatsapp_number: string;
    user: User;
}
export interface UpdatePartnerPayload extends Partial<Omit<CreatePartnerPayload, 'user'>> {
    id: string;
    user: User;
}
export interface DeletePartnerPayload {
    id: string;
    user: User;
}

export interface ReceiveFromPartnerPayload {
    partner_id: string;
    amount: number;
    currency: Currency;
    user: User;
    bank_account_id?: string;
    source_account_number?: string;
    destination_account_number?: string;
}
export interface PayToPartnerPayload {
    partner_id: string;
    amount: number;
    currency: Currency;
    user: User;
    bank_account_id?: string;
    source_account_number?: string;
    destination_account_number?: string;
}

export interface GetPartnerAccountByNamePayload {
    partner_name: string;
}


export enum TransferStatus {
    Unexecuted = 'Unexecuted',
    PendingCashbox = 'PendingCashbox',
    Executed = 'Executed',
    Cancelled = 'Cancelled',
    RejectedByCashbox = 'RejectedByCashbox',
}

export interface DomesticTransfer {
    id: string;
    created_at: Date;
    sender: { name: string; tazkereh: string };
    receiver: { name: string; tazkereh: string };
    amount: number;
    currency: Currency;
    commission: number;
    destination_province: string;
    partner_sarraf: string;
    partner_reference?: string;
    status: TransferStatus;
    created_by: string;
    history: { status: TransferStatus; timestamp: Date; user: string }[];
    customer_id?: string;
}

export interface CreateDomesticTransferPayload {
    sender_name: string;
    sender_tazkereh: string;
    receiver_name: string;
    receiver_tazkereh: string;
    amount: number;
    currency: Currency;
    commission: number;
    destination_province: string;
    partner_sarraf: string;
    partner_reference?: string;
    is_cash_payment: boolean;
    customer_code?: string;
    user: User;
}
export interface UpdateTransferStatusPayload {
    transfer_id: string;
    new_status: TransferStatus;
    user: User;
}
export interface FindTransfersByQueryPayload {
    query: string;
}
export interface PayoutIncomingTransferPayload {
    transfer_id: string;
    user: User;
}

export enum CashboxRequestStatus {
    Pending = 'Pending',
    PendingCashboxApproval = 'PendingCashboxApproval',
    Approved = 'Approved',
    Rejected = 'Rejected',
    AutoApproved = 'AutoApproved',
}

export interface CashboxBalance {
    currency: Currency;
    balance: number;
}

export interface CashboxRequest {
    id: string;
    created_at: Date;
    requested_by: string;
    status: CashboxRequestStatus;
    reviewed: boolean;
    request_type: 'withdrawal' | 'deposit';
    amount: number;
    currency: Currency;
    reason: string;
    customer_code?: string;
    resolved_by?: string;
    resolved_at?: Date;
    reviewed_at?: Date;
    linked_entity?: {
        type: string;
        id: string;
        description: string;
        details?: any;
    };
    bank_account_id?: string;
    source_account_number?: string;
    destination_account_number?: string;
}

export interface CreateCashboxRequestPayload {
    request_type: 'withdrawal' | 'deposit';
    amount: number;
    currency: Currency;
    reason: string;
    user: User;
    customer_code?: string;
    linked_entity?: {
        type: string;
        id: string;
        description: string;
        details?: any;
    };
    bank_account_id?: string;
    source_account_number?: string;
    destination_account_number?: string;
    bypass_cashier?: boolean;
}
export interface ResolveCashboxRequestPayload {
    request_id: string;
    resolution: 'approve' | 'reject';
    user: User;
}
export interface IncreaseCashboxBalancePayload {
    amount: number;
    currency: Currency;
    description: string;
    user: User;
    bank_account_id?: string;
    source_account_number?: string;
}

export enum ExpenseCategory {
    Salary = 'Salary',
    Rent = 'Rent',
    Utilities = 'Utilities',
    Hospitality = 'Hospitality',
    Other = 'Other',
}

export enum ExpenseStatus {
    PendingApproval = 'PendingApproval',
    Approved = 'Approved',
    Rejected = 'Rejected',
}

export interface Expense {
    id: string;
    created_at: Date;
    user: string;
    category: ExpenseCategory;
    amount: number;
    currency: Currency;
    description: string;
    status: ExpenseStatus;
    linked_cashbox_request_id?: string;
    linked_foreign_transaction_id?: string;
}

export interface CreateExpensePayload {
    category: ExpenseCategory;
    amount: number;
    currency: Currency;
    description: string;
    user: User;
    skip_cashbox_request?: boolean;
    linked_foreign_transaction_id?: string;
}

export interface BankAccount {
    id: string;
    account_holder: string;
    bank_name: string;
    account_number: string;
    card_to_card_number?: string;
    balance: number;
    currency: Currency;
    status: 'Active' | 'Inactive';
}

export interface AddBankAccountPayload {
    account_holder: string;
    bank_name: string;
    account_number: string;
    card_to_card_number?: string;
    currency: Currency;
    user: User;
}
export interface UpdateBankAccountPayload extends Partial<Omit<AddBankAccountPayload, 'currency'|'user'>> {
    id: string;
    user: User;
}
export interface DeleteBankAccountPayload {
    id: string;
    user: User;
}

export interface Asset {
    id: string;
    name: string;
    currency: Currency;
}

export enum ForeignTransactionStatus {
    PendingWithdrawalApproval = 'PendingWithdrawalApproval',
    PendingDeposit = 'PendingDeposit',
    PendingDepositApproval = 'PendingDepositApproval',
    Completed = 'Completed',
    Rejected = 'Rejected',
}

export interface ForeignTransaction {
    id: string;
    timestamp: Date;
    description: string;
    user: string;
    status: ForeignTransactionStatus;

    from_asset_id: string;
    from_asset_name: string;
    from_currency: Currency;
    from_amount: number;
    withdrawal_request_id: string;

    to_asset_id?: string;
    to_asset_name?: string;
    to_currency?: Currency;
    to_amount?: number;
    deposit_request_id?: string;
}


export interface InitiateForeignExchangePayload {
    user: User;
    description: string;
    from_asset_id: string;
    from_amount: number;
}

export interface CompleteForeignExchangePayload {
    user: User;
    transaction_id: string;
    to_asset_id: string;
    to_amount: number;
}

export interface InternalCustomerExchangePayload {
    customer_id: string;
    from_currency: Currency;
    from_amount: number;
    to_currency: Currency;
    to_amount: number;
    rate: number;
    user: User;
}

export interface InternalExchange {
    id: string;
    timestamp: Date;
    customer_id: string;
    from_currency: Currency;
    from_amount: number;
    to_currency: Currency;
    to_amount: number;
    rate: number;
    user: string;
}

export enum CommissionTransferStatus {
    PendingDepositApproval = 'PendingDepositApproval',
    PendingExecution = 'PendingExecution',
    PendingWithdrawalApproval = 'PendingWithdrawalApproval',
    Completed = 'Completed',
    Rejected = 'Rejected',
}

export interface CommissionTransfer {
    id: string;
    created_at: Date;
    initiator_type: 'Customer' | 'Partner';
    initiator_id: string;
    amount: number;
    currency: Currency;
    source_account_number: string;
    received_into_bank_account_id: string;
    commission_percentage: number;
    status: CommissionTransferStatus;
    created_by: string;
    
    completed_at?: Date;
    paid_from_bank_account_id?: string;
    destination_account_number?: string;
    commission_amount?: number;
    final_amount_paid?: number;
    
    deposit_request_id?: string;
    withdrawal_request_id?: string;
}

export interface LogCommissionTransferPayload {
    user: User;
    initiator_type: 'Customer' | 'Partner';
    customer_code?: string;
    partner_id?: string;
    amount: number;
    source_account_number: string;
    received_into_bank_account_id: string;
    commission_percentage: number;
}

export interface ExecuteCommissionTransferPayload {
    user: User;
    transfer_id: string;
    paid_from_bank_account_id: string;
    destination_account_number: string;
}

export interface SystemSettings {
    approval_thresholds: {
        [key in Currency]?: number;
    };
}
export interface UpdateSystemSettingsPayload {
    settings: SystemSettings;
}

export interface ActivityLog {
    id: string;
    timestamp: Date;
    user: string;
    action: string;
}

export interface AccountTransfer {
    id: string;
    timestamp: Date;
    from_customer_id: string;
    to_customer_id: string;
    amount: number;
    currency: Currency;
    description: string;
    user: string;
    status: 'PendingAssignment' | 'Completed';
    debit_transaction_id: string;
    credit_transaction_id: string;
}

export interface CreateAccountTransferPayload {
    from_customer_code: string;
    to_customer_code: string;
    amount: number;
    currency: Currency;
    description: string;
    user: User;
    is_pending_assignment: boolean;
}

export interface ReassignTransferPayload {
    transfer_id: string;
    final_customer_code: string;
    user: User;
}

export enum ReportType {
    ProfitAndLoss = 'ProfitAndLoss',
    CashboxSummary = 'CashboxSummary',
    InternalLedger = 'InternalLedger',
}

export interface DashboardAnalyticsData {
    partnerActivity: { label: string; value: number }[];
    weeklyActivity: {
        labels: string[];
        domesticCounts: number[];
        foreignCounts: number[];
    };
    cashboxSummary: { currency: string; balance: number }[];
}


export interface ProfitAndLossReportData {
    totalRevenue: number;
    totalExpenses: number;
    netProfit: number;
    currency: Currency;
    revenueItems: { date: Date; description: string; amount: number }[];
    expenseItems: { date: Date; description: string; amount: number }[];
}

export interface CashboxSummaryReportData {
    totalInflow: number;
    totalOutflow: number;
    netChange: number;
    currency: Currency;
    transactions: {
        id: string;
        timestamp: Date;
        type: 'inflow' | 'outflow';
        amount: number;
        currency: Currency;
        reason: string;
        user: string;
    }[];
}

export interface InternalLedgerReportData {
    transactions: ForeignTransaction[];
}

export interface GenerateReportPayload {
    report_type: ReportType;
    start_date: string;
    end_date: string;
    currency: Currency;
}

export enum AmanatStatus {
    Active = 'Active',
    Returned = 'Returned',
}

export interface Amanat {
    id: string;
    created_at: Date;
    customer_name: string;
    amount: number;
    currency: Currency;
    notes: string;
    status: AmanatStatus;
    created_by: string;
    linked_cashbox_deposit_id: string;
    returned_at?: Date;
    returned_by?: string;
    linked_cashbox_withdrawal_id?: string;
    bank_account_id?: string;
}

export interface CreateAmanatPayload {
    customer_name: string;
    amount: number;
    currency: Currency;
    notes: string;
    user: User;
    bank_account_id?: string;
}

export interface ReturnAmanatPayload {
    amanat_id: string;
    user: User;
}